`timescale 1ns / 1ps

module Testbench();
    logic [3:0] src_x, src_y, src_z;
    logic [3:0] dest_x, dest_y, dest_z;
    logic [2:0] direction;
    logic clk, reset;
    int start_time, end_time;
    int latency;
    real throughput;
    int max_cycles = 1000;  // Define a max cycle count to prevent infinite loop
    int cycle_count = 0;
    logic [1:0] congestion_x, congestion_y, congestion_z;

    AXYZ_Router uut (
        .src_x(src_x),
        .src_y(src_y),
        .src_z(src_z),
        .dest_x(dest_x),
        .dest_y(dest_y),
        .dest_z(dest_z),
        .direction(direction),
        .clk(clk),
        .reset(reset),
        .congestion_x(congestion_x),  // Connect congestion signals
        .congestion_y(congestion_y),
        .congestion_z(congestion_z)
    );

    always begin
        #5 clk = ~clk;
    end

    initial begin
      $display("Starting Router test for AXYZ adaptive routing...");

        // Initialize signals
        clk = 0;
        reset = 1;
        src_x = 3; src_y = 4; src_z = 5;
        dest_x =4; dest_y = 8; dest_z = 10;
        congestion_x = 2;  // Set congestion signals to zero for testing
        congestion_y = 0;
        congestion_z = 0;
        #10 reset = 0;

        start_time = $time;

        // Loop to wait for packet arrival, with a cycle limit to prevent infinite execution
        while (uut.state != uut.ARRIVED && cycle_count < max_cycles) begin
            #10;
          if (cycle_count==8)
          		congestion_x=0;
          	cycle_count++;
        
        	$display("Cycle count: %d", cycle_count);
        end
        
        if (cycle_count >= max_cycles) begin
            $display("Max cycle limit reached. Possible issue in routing.");
            $finish;
        end

        end_time = $time;
        latency = (end_time - start_time) / 10;
        $display("Routing complete.");
        $display("Latency: %0d clock cycles", latency);
        throughput = 1 / ((end_time - start_time) / 1000000.0);
        $display("Throughput: %0f packets per us", throughput);

        // Simulation timeout as a safeguard
        #5000;
        $display("Simulation Timeout Reached.");
        $finish;
    end
endmodule
