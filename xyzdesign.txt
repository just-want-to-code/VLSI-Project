`timescale 1ns / 1ps
// XYZ_Router.sv
module XYZ_Router(
    input logic [3:0] src_x, src_y, src_z,
    input logic [3:0] dest_x, dest_y, dest_z,
    output logic [2:0] direction,
    input logic clk, reset,
  	input logic [1:0] congestion_x, congestion_y, congestion_z  
);
    // Internal registers for the current position of the packet
    logic [3:0] current_x, current_y, current_z;

    // Routing states
    typedef enum logic [1:0] {
        IDLE = 2'b00,
        ROUTING = 2'b01,
        ARRIVED = 2'b10
    } state_t;

    state_t state, next_state;

    // Direction encoding: 000 - Left, 001 - Right, 010 - Down, 011 - Up, 100 - Forward, 101 - Backward
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            current_x <= src_x;
            current_y <= src_y;
            current_z <= src_z;
        end else begin
            state <= next_state;
        end
    end

  always_ff @(posedge clk) begin
        if (state == ROUTING) begin
            // Update position based on the direction
          if (current_x < dest_x && congestion_x<2)
                current_x <= current_x + 1;
          else if (current_x > dest_x && congestion_x<2)
                current_x <= current_x - 1;
          if (current_y < dest_y && current_x == dest_x && congestion_y<2)
                current_y <= current_y + 1;
          else if (current_y > dest_y && current_x==dest_x && congestion_y<2)
                current_y <= current_y - 1;

          if (current_z < dest_z && current_y==dest_y && current_x==dest_x && congestion_z<2)
                current_z <= current_z + 1;
          else if (current_z > dest_z && current_y==dest_y && current_x==dest_x && congestion_z<2)
                current_z <= current_z - 1;
        end
    end

    // State machine for routing the packet
    always_comb begin
        case (state)
            IDLE: begin
                if (current_x != dest_x || current_y != dest_y || current_z != dest_z) begin
                    next_state = ROUTING;
                end else begin
                    next_state = ARRIVED;
                end
            end
            ROUTING: begin
                if (current_x == dest_x && current_y == dest_y && current_z == dest_z)
                    next_state = ARRIVED;
                else
                    next_state = ROUTING;
            end
            ARRIVED: begin
                next_state = IDLE;  // After arrival, go back to idle for next packet
            end
        endcase
    end

    // Determine the direction of the packet movement (for logging purposes)
    always_comb begin
        if (state == ROUTING) begin
          $display("Routing... Current Position: (%0d, %0d, %0d) | Destination: (%0d, %0d, %0d) | Direction: %b",current_x, current_y, current_z, dest_x, dest_y, dest_z, direction);
          if (current_x < dest_x && congestion_x<2)
                direction = 3'b001;  // Right
          else if (current_x > dest_x && congestion_x<2)
                direction = 3'b000;  // Left
          else if (current_y < dest_y && current_x == dest_x && congestion_y<2)
                direction = 3'b011;  // Up
          else if (current_y > dest_y && current_x == dest_x && congestion_y<2)
                direction = 3'b010;  // Down
          else if (current_z < dest_z && current_y==dest_y && current_x==dest_x && congestion_z<2)
                direction = 3'b101;  // Forward
          else if (current_z > dest_z && current_y==dest_y && current_x==dest_x && congestion_z<2)
                direction = 3'b100;  // Backward
            else
                direction = 3'b000;  // No movement
        end else begin
            direction = 3'b000;  // No movement
        end
    end

endmodule

